<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        @foreach (var page in Pages)
        {
            <li class="page-item @(page.Enabled ? null : "disabled") @(page.IsCurrentPage ? "active" : null)"
                @onclick="() => OnPageChanged(page)" style="cursor: pointer">
                <a class="page-link" href="#">@(page.Text)</a>
            </li>
        }
    </ul>
</nav>

@code {

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    [Parameter]
    public int Range { get; set; } = 3;

    private async Task OnPageChanged(PageModel page)
    {
        if (page.Page == CurrentPage) return;
        if (!page.Enabled) return;

        CurrentPage = page.Page;
        LoadPages();
        await PageChanged.InvokeAsync(CurrentPage);
    }

    private bool IsPreviousEnabled => CurrentPage != 1;
    private bool IsNextEnabled => CurrentPage != TotalPages;
    private int PreviousPage => CurrentPage == 1 ? 1 : CurrentPage - 1;
    private int NextPage => CurrentPage == TotalPages ? TotalPages : CurrentPage + 1;
    List<PageModel> Pages = new();

    protected override void OnParametersSet()
    {
        LoadPages();
        if (CurrentPage < 1)
        {
            CurrentPage = 1;
        }
        else if (CurrentPage > TotalPages)
        {
            CurrentPage = TotalPages;
        }
    }

    private void LoadPages()
    {
        Pages = new List<PageModel>();

        Pages.Add(new PageModel(1, IsPreviousEnabled, "First"));
        Pages.Add(new PageModel(PreviousPage, IsPreviousEnabled, "Previous"));

        for (var i = 1; i <= TotalPages; i++)
        {
            if (i >= CurrentPage - Range && i <= CurrentPage + Range)
            {
                Pages.Add(new PageModel(i)
                {
                    Enabled = CurrentPage != i,
                    IsCurrentPage = CurrentPage == i
                });
            }
        }

        Pages.Add(new PageModel(NextPage, IsNextEnabled, "Next"));
        Pages.Add(new PageModel(TotalPages, IsNextEnabled, "Last"));
    }

    class PageModel
    {
        public PageModel(int page) : this(page, true)
        {}

        public PageModel(int page, bool enabled)
            : this(page, enabled, page.ToString())
        {
            Page = page;
            Enabled = enabled;
        }

        public PageModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public bool Enabled { get; set; }
        public int Page { get; set; }
        public bool IsCurrentPage { get; set; }
    }

}
@page "/"
@using System.Globalization
@using CsvHelper
@inject HttpClient Http
@inject IJSRuntime JS

<AuthorizeView>
    <NotAuthorized>
        <span class="text-danger">User not registered. Please sign up/in to create or modify contacts</span>
    </NotAuthorized>
</AuthorizeView>

<h3>Contacts manager</h3>
<span>Here you can save your contacts info</span>

<AuthorizeView>
    <Authorized>
        <div>
            <a class="btn btn-success mb-2" href="create-person">
                <Icon IconStyle="IconStyle.Solid" IconSize="IconSize.Small" IconName="fa-plus"
                      Animation="Animation.Beat()"
                      Color="white"/>
                <span>Create contact</span>
            </a>
        </div>
    </Authorized>
</AuthorizeView>

<GenericList List="people">
    <NullTemplate>
        <img src="https://i.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.webp" alt="Loading">
    </NullTemplate>
    <EmptyTemplate>
        <img src="https://media3.giphy.com/media/jU9OCvBiO1besabUKU/giphy.gif?cid=790b7611248270ee3eabfd3e0cd20af43f56f79f595012b5&rid=giphy.gif&ct=g" alt="Empty">
    </EmptyTemplate>
    <ListTemplate>
        <table class="table">
            <thead>
            <tr>
                <th class="col-3"><Icon IconName="fa-users"/> Name</th>
                <th class="col-4"><Icon IconName="fa-phone"/> Phone</th>
                <th class="col-3"><Icon IconName="fa-at"/> Email</th>
                <th class="col-2"><Icon IconName="fa-eye" IconStyle="IconStyle.Regular" Animation="Animation.BeatFade()"/> Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.Name</td>
                    <td>@person.Phone</td>
                    <td>@person.Email</td>
                    <td>
                        <AuthorizeView>
                            <Authorized>
                                <a class="btn btn-outline-success" href="edit-person/@person.Id">
                                    <Icon IconName="fa-pen"/>
                                </a>
                                <a class="btn btn-outline-danger" @onclick="@(() => RemovePerson(person.Id))">
                                    <Icon IconName="fa-trash"/>
                                </a>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        
        <Pagination TotalPages="totalPages" CurrentPage="currentPage" PageChanged="SelectPage"></Pagination>

        <button class="btn btn-outline-success" @onclick="ExportCsv"><Icon IconName="fa-file-csv"/> Export to CSV</button>
        <button class="btn btn-outline-success" @onclick="ExportExcel"><Icon IconName="fa-file-excel"/> Export to Excel</button>

    </ListTemplate>
</GenericList>

<button class="btn btn-primary" @onclick="GenerateData">Create 100 rows</button>

@* This is to customized the Fragment to show the list of people. *@
@* <GenericList List="people"> *@
@*     <TemplateWithType> *@
@*         <div class="card"> *@
@*             <div class="card-body"> *@
@*                 @context.Name *@
@*             </div> *@
@*         </div> *@
@*     </TemplateWithType> *@
@* </GenericList> *@


@code {
    List<Person>? people { get; set; }
    private int currentPage = 1;
    private int totalPages = 1;
    private int rowsPerPage = 10;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;

        await LoadPeople(currentPage, rowsPerPage: 10);
    }
    
    private async void SelectPage(int page)
    {
        currentPage = page;
        await LoadPeople(page, rowsPerPage);
    }

    async Task LoadPeople(int page, int rowsPerPage)
    {
        var httpResponse = await Http.GetAsync($"people?Page={page}&RowsPerPage={rowsPerPage}");

        if (httpResponse.IsSuccessStatusCode)
        {
            totalPages = int.Parse(httpResponse.Headers.GetValues("totalPages").FirstOrDefault());
            people = await httpResponse.Content.ReadFromJsonAsync<List<Person>>();
        }
    }

    async Task RemovePerson(int idPerson)
    {
        var personSelected = people.First(p => p.Id == idPerson);
        var message = $"Are you sure you want to delete to {personSelected.Name}?";
        if (await JS.Confirm("Confirm", message, IJSExtensions.TypeMessageSweetAlert.question))
        {
            await Http.DeleteAsync($"people/{idPerson}");
            await LoadPeople(currentPage, rowsPerPage);
        }
    }

    private async void ExportCsv()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvWriter(writer, CultureInfo.CurrentCulture))
                {
                    await csv.WriteRecordsAsync(people);
                }
                var arr = memoryStream.ToArray();
                await JS.SaveAs("People.csv", arr);
            }
        }
    }

    private async void ExportExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Contacts in DB");

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection(
                from p in people
                select new { p.Id, p.Name, p.Phone, p.Email }, true);

            // Setting some style to cells in Excel
            var header = worksheet.Cells["A1:D1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);

            // Setting style to headers
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            await JS.SaveAs("Contacts.xlsx", package.GetAsByteArray());
        }
    }

    private async Task GenerateData()
    {
        var rows = await Http.GetFromJsonAsync<Person[]>("DataSeed.json");
        foreach (var row in rows)
        {
            await Http.PostAsJsonAsync("people", row);
            await Task.Delay(500);
        }
    }

}
@page "/"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using System.IO
@using CsvHelper
@using System.Globalization

<h3>People </h3>

<div>
    <a class="btn btn-success" href="create-person">Create person</a>
</div>

@if (people == null)
{
    <em>Loading...</em>
}
else if (people.Length == 0)
{
    <span>No people in DB</span>
}
else
{

    <table class="table ">
        <thead>
        <tr>
            <th></th>
            <th>Id</th>
            <th>Name</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var person in people)
        {
            <tr>
                <td>
                    <a class="btn btn-success" href="edit-person/@person.Id">Edit</a>
                    <a class="btn btn-danger" @onclick="@(() => RemovePerson(person.Id))" >Delete</a>
                </td>
                <td>@person.Id</td>
                <td>@person.Name</td>
            </tr>

        }
        </tbody>
    </table>
    
    <button class="btn btn-outline-info" @onclick="ExportCsv">Export to CSV</button>
    <button class="btn btn-outline-info" @onclick="ExportExcel">Export to Excel</button>
}

@code {
    Person[]? people { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPeople();
    }

    async Task LoadPeople()
    {
        people = await Http.GetFromJsonAsync<Person[]>("people");
    }

    async Task RemovePerson(int idPerson)
    {
        var personSelected = people.First(p => p.Id == idPerson);
        string message = $"Are you sure you want to delete to {personSelected.Name}?";
        if (await JS.Confirm("Confirm", message, IJSExtensions.TypeMessageSweetAlert.question))
        {             
            await Http.DeleteAsync($"people/{idPerson}");
            await LoadPeople();
        }
    }

    private async void ExportCsv()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvWriter(writer, CultureInfo.CurrentCulture))
                {
                    await csv.WriteRecordsAsync(people);
                }
                var arr = memoryStream.ToArray();
                await JS.SaveAs("People.csv", arr);
            }
        }
    }

    private async void ExportExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("People in DB");

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection(
                from p in people
                select new { p.Id, p.Name }, true);

            // Setting some style to cells in Excel
            var header = worksheet.Cells["A1:B1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);
            
            // Setting style to headers
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            JS.SaveAs("People.xlsx", package.GetAsByteArray());
        }
    }
}

